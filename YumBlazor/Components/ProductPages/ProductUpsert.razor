@page "/product/update/{id:int}"
@page "/product/create"

@inject IProductRepository ProductRepository
@inject ICategoryRepository CategoryRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IWebHostEnvironment Environment

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="loading"/>
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> @(Id == 0 ? "Create" : "Update") Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductUpsertForm" OnValidSubmit="UpsertForm">
                <DataAnnotationsValidator/>
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Name" class="form-control" id="Name"/>
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.Description" class="form-control" id="Description"/>
                        <label for="Description">Description</label>
                        <ValidationMessage For="@(() => Product.Description)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Product.SpecialTag" class="form-control" id="SpecialTag"/>
                        <label for="Description">SpecialTag</label>
                        <ValidationMessage For="@(() => Product.SpecialTag)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber @bind-Value="Product.Price" class="form-control" id="Price"/>
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect @bind-Value="Product.CategoryId" class="form-control" id="Category">
                            <option value="0">--Select Category--</option>
                            @foreach (var category in _categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="Category">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)"></ValidationMessage>
                    </div>
                    <div class="form-floating py-3 col-12 pb-2">
                        @if (Product.ImageUrl is null)
                        {
                            <InputFile accept="image/x-png,image/jpeg" OnChange="LoadFileAsync" class="form-control" id="customFile"/>
                            <label for="customFile">Upload Image</label>
                        }

                        @if (Product.ImageUrl is not null)
                        {
                            <div class="row pt-1">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="..." class="img-thumbnail"/>
                                </div>
                                <div class="col-md-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-floppy"></i> @(Id == 0 ? "Create" : "Update")
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i> Back to products
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private string? _imageDirectoryPath;
    private IEnumerable<Category> _categories;

    [SupplyParameterFromForm] private Product Product { get; set; } = new();

    [Parameter] public int Id { get; set; }

    protected override void OnInitialized()
    {
        _imageDirectoryPath = Path.Combine(Environment.WebRootPath, "images", "product");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryListAsync();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadProductAndCategoryListAsync()
    {
        _categories = await CategoryRepository.GetAllAsync();
        if (Id == 0) return;

        Product = await ProductRepository.GetAsync(Id);
    }

    private async Task UpsertForm(EditContext obj)
    {
        IsProcessing = true;
        if (Id == 0)
        {
            await ProductRepository.CreateAsync(Product);
            await JsRuntime.ToastrSuccess($"Product {Product.Name} created successfully");
        }
        else
        {
            await ProductRepository.UpdateAsync(Product);
            await JsRuntime.ToastrSuccess($"Product {Product.Name} updated successfully");
        }

        IsProcessing = false;
        NavigationManager.NavigateTo("product");
    }

    private async Task LoadFileAsync(InputFileChangeEventArgs args)
    {
        IsProcessing = true;
        var file = args.File;
        var fileInfo = new FileInfo(file.Name);
        var newName = $"{Guid.NewGuid()}{fileInfo.Extension}";
        if (!Directory.Exists(_imageDirectoryPath))
        {
            Directory.CreateDirectory(_imageDirectoryPath!);
        }

        var path = Path.Combine(_imageDirectoryPath!, newName);

        await using var fileStream = new FileStream(path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.ImageUrl = $"/images/product/{newName}";
        IsProcessing = false;
    }

    private void DeleteImage()
    {
        if (Product.ImageUrl is null) return;

        var filename = Path.Combine(_imageDirectoryPath!, Product.ImageUrl.Split('/').Last());

        if (!File.Exists(filename)) return;

        File.Delete(filename);
        Product.ImageUrl = null;
    }
}