@page "/category"
@inject ICategoryRepository CategoryRepository

@if (_isProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="loading"/>
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2"> Category List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="col-12 text-end">
                <a href="category/create" class="btn btn-secondary btn-lg m-4" style="width: 250px">Add New Category</a>
            </div>
            @if (_categories.Any())
            {
                <table class="table table-striped table-bordered">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th></th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var category in _categories)
                    {
                        <tr>
                            <td>
                                @category.Name
                            </td>
                            <td>
                                <a href=@($"category/update/{category.Id}") class="btn btn-primary">Edit</a>
                                <button class="btn btn-danger">Delete</button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        </div>
    </div>
}

@code {
    private bool _isProcessing = true;
    private IEnumerable<Category> _categories = new List<Category>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategoriesAsync();
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategoriesAsync()
    {
        _categories = await CategoryRepository.GetAllAsync();
    }

}